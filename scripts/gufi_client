#!/usr/bin/env python2.7
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# -----
# NOTE:
# -----
#
# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import getpass
import imp
import os
import sys

# location of this file
PATH = os.path.realpath(__file__)
DIR = os.path.dirname(PATH)

gufi_config = imp.load_source('gufi_config', os.path.join(DIR, 'gufi_config'))

class Args:
    def __init__(self):
        self.config = gufi_config.DEFAULT_CONFIG_PATH
        self.args = []

def parse_args(cmd_args = sys.argv):
    '''
    Manually parse arguments
    '''

    if len(cmd_args) == 0:
        sys.stderr.write('Bad command line arguments\n')
        sys.exit(1)

    tool = os.path.basename(cmd_args[0])

    args = Args()

    i = 1
    while i < len(cmd_args):
        if (cmd_args[i] == '--help') or (cmd_args[i] == '-h'):
            print 'usage: ' + tool + ' [-h] [--version] [--config CONFIG] [args [args ...]]'
            print
            print tool
            print
            print 'positional arguments:'
            print '  args                      arguments to ' + tool + ' to pass to the server'
            print
            print 'optional arguments:'
            print '  -h, --help                show this help message and exit'
            print '  --version                 show program\'s version number and exit'
            print '  --config CONFIG           Configuration file name'
            sys.exit(0)
        elif cmd_args[i] == '--version':
            print tool + ' @GUFI_VERSION@'
            sys.exit(0)
        elif cmd_args[i] == '--config':
            i += 1
            args.config = cmd_args[i]
        elif cmd_args[i] == '--':
            i += 1
            break
        else:
            args.args += [cmd_args[i]]
        i += 1

    args.args += cmd_args[i:]
    return args

def talk_to_server(args):
    '''
    Given a set of arguments, attempt to connect to a remote host and run the command
    '''
    try:
        ssh = paramiko.client.SSHClient()

        # load known server host keys
        ssh.load_system_host_keys(os.path.expanduser(args.known_hosts))

        # connect to the server
        ssh.connect(hostname=args.hostname,
                    port=args.port,
                    username=getpass.getuser(),
                    hostkey=paramiko.opensshkey.load_pubkey_from_file(args.hostkey))

        # run the command
        # assumes that gufi_@TOOL@ can be found in PATH
        cmd = os.path.join('gufi_@TOOL@ ' + ' '.join(['"' + arg + '"' for arg in args.args]))

        _, stdout, stderr = ssh.exec_command(cmd)

        try:
            sys.stdout.write(stdout.read())
            sys.stderr.write(stderr.read())
        except Exception as e:
            sys.stderr.write(e)
    finally:
        ssh.close()

if __name__  == '__main__':
    args = parse_args(sys.argv)
    config = gufi_config.read_filename(args.config)
    args.hostname = config['Server']
    args.port = config['Port']
    args.known_hosts = config['KnownHosts']
    args.hostkey = config['HostKey']

    # import paramiko from provided path
    sys.path.append(config['Paramiko'])
    import paramiko

    talk_to_server(args)
