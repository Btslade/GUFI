CC                   ?= cc
CXX                  ?= c++
CFLAGS               ?=
CXXFLAGS             ?= -std=c++11
LDFLAGS              ?=
LIB                   = GUFI

CFLAGS               += -I$(realpath include)
CXXFLAGS             += -I$(realpath include)

PCRE_CFLAGS          ?= $(shell pkg-config --cflags libpcre)
PCRE_LDFLAGS         ?= $(shell pkg-config --libs   libpcre)

SQLITE3_CFLAGS       ?= $(shell pkg-config --cflags sqlite3)
SQLITE3_LDFLAGS      ?= $(shell pkg-config --libs   sqlite3)

# different fuse libs for OSX/Linux
ifeq ($(UNAME_S), Darwin)
	FUSE_PKG = osxfuse
else
	FUSE_PKG = fuse
endif

FUSE_CFLAGS          ?= $(shell pkg-config --cflags $(FUSE_PKG))
FUSE_LDFLAGS         ?= $(shell pkg-config --libs   $(FUSE_PKG))

MYSQL_CFLAGS         ?= $(shell mysql_config --include)
MYSQL_LDFLAGS        ?= $(shell mysql_config --libs_r)

MAKEFILE_PATH         = $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))

THPOOL_PATH          ?= $(MAKEFILE_PATH)/C-Thread-Pool
THPOOL_CFLAGS        ?= -I$(realpath $(MAKEFILE_PATH))
THPOOL_LDFLAGS       ?= -L$(THPOOL_PATH) -lthpool -pthread
THPOOL_LIB           ?= $(THPOOL_PATH)/libthpool.a

SQLITE3_PCRE_PATH    ?= $(MAKEFILE_PATH)/sqlite3-pcre
SQLITE3_PCRE_CFLAGS  ?= -I$(SQLITE3_PCRE_PATH) $(SQLITE3_CFLAGS) $(PCRE_CFLAGS)
SQLITE3_PCRE_LDFLAGS ?= -L$(SQLITE3_PCRE_PATH) -lsqlite3-pcre $(SQLITE3_LDFLAGS) $(PCRE_LDFLAGS)
SQLITE3_PCRE_LIB     ?= $(SQLITE3_PCRE_PATH)/libsqlite3-pcre.a

CFLAGS               += $(THPOOL_CFLAGS)  $(SQLITE3_PCRE_CFLAGS)
CXXFLAGS             += $(THPOOL_CFLAGS)  $(SQLITE3_PCRE_CFLAGS)
LDFLAGS              += $(THPOOL_LDFLAGS) $(SQLITE3_PCRE_LDFLAGS)

# CFLAGS += -std=c11 -D_POSIX_C_SOURCE=2
ifneq ($(DEBUG),)
   CFLAGS += -Wall -g -O0 -DDEBUG
else
   CFLAGS += -O3
endif

# --- DARWIN
UNAME_S = $(shell uname -s)
ifeq ($(UNAME_S), Darwin)
	CFLAGS += -D_DARWIN_C_SOURCE -DCONFIG_SYS_XATTR_H -DCONFIG_DARWIN_XATTRS
else
    CFLAGS += -DCONFIG_ATTR_XATTR_H -DCONFIG_GNU_XATTRS
endif

# this is invoked in a recursive build, for bfmi.mysql
# (see target "%.mysql")
# bfmi currently uses *both* sqlite3 and mysql!
ifeq ($(MYSQL),)
	LIBFILES += dbutils
else
	CFLAGS  += $(MYSQL_CFLAGS)
	LDFLAGS += $(MYSQL_LDFLAGS)
endif

ifneq ($(FUSE),)
	CFLAGS  += $(FUSE_CFLAGS)
	LDFLAGS += $(FUSE_LDFLAGS)
endif

.PHONY: C-Thread-Pool sqlite3-pcre googletest

# let sub-makefiles use these variables
export

all: $(THPOOL_LIB) $(SQLITE3_PCRE_LIB)
	$(MAKE) -C src
	$(MAKE) -C scripts

# NOTE
#
# We're now using the C-Thread-Pool library
# (https://github.com/Pithikos/C-Thread-Pool). thpool.h from that "library"
# provides an incomplete definition of struct thpool_.  The developers
# suggest compiling like so:
#
#    gcc example.c thpool.c -D THPOOL_DEBUG -pthread -o example
#
# That's fine if you are compiling an aplication in one shot, but it fails
# for the case of building a .o that is part of a library.  Thus, we have
# a forked version of the repo, which we have modified to allow this.

$(THPOOL_LIB): $(THPOOL_PATH)/thpool.c $(THPOOL_PATH)/thpool.h
	$(CC) $(CFLAGS) -static -c -o $@ $< -pthread

$(SQLITE3_PCRE_LIB): $(SQLITE3_PCRE_PATH)/pcre.c $(SQLITE3_PCRE_PATH)/pcre.h
	$(MAKE) -C sqlite3-pcre libsqlite3-pcre.a

clean:
	$(MAKE) -C src clean

test: all
	$(MAKE) -C test

clean_test:
	$(MAKE) -C test clean
