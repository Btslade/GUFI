#!/usr/bin/env python2
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.


# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----

# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.


# From Los Alamos National Security, LLC:
# LA-CC-15-039

# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import os
import subprocess
import sys

import query_builder as qb

# build the SELECT portion of the query
def build_select(args):
    if args.select:
        return [args.select]
    return None

# build the WHERE portion of the query
def build_where(args):
    where = []

    if args.name:
        where += ['name REGEXP "{}"'.format(args.name)]

    if args.atime_before:
        where += ['atime < {}'.format(args.atime_before)]

    if args.mtime_before:
        where += ['mtime < {}'.format(args.mtime_before)]

    if args.ctime_before:
        where += ['ctime < {}'.format(args.ctime_before)]

    if args.atime_after:
        where += ['atime > {}'.format(args.atime_after)]

    if args.mtime_after:
        where += ['mtime > {}'.format(args.mtime_after)]

    if args.ctime_after:
        where += ['ctime > {}'.format(args.ctime_after)]

    if args.smaller_than:
        where += ['size < {}'.format(args.smaller_than)]

    if args.larger_than:
        where += ['size < {}'.format(args.larger_than)]

    if args.uid:
        where += ['uid == "{}"'.format(qb.get_uid(args.uid))]

    return where

# build the GROUP BY portion of the query
def build_group_by(args):
    if args.group_by:
        return [args.group_by]
    return None

# build the ORDER BY portion of the query
def build_order_by(args):
    order_by = []

    if args.smallest:
        order_by += ['size ASC']

    if args.largest:
        order_by += ['size DESC']

    if args.oldest:
        order_by += ['ctime ASC']

    if args.newest:
        order_by += ['ctime DESC']

    return order_by

if __name__=='__main__':
    cwd = os.getcwd()

    parser = argparse.ArgumentParser(description='GUFI version of find')
    parser.add_argument('--root',             metavar='path', dest='root',          type=str,                default=cwd, help='top-most directory to search from (default: ' + cwd + ')')
    parser.add_argument('--delim',            metavar='c',    dest='delim',         type=qb.check_char,                   help='delimiter separating output columns')
    parser.add_argument('--depth',            metavar='d',    dest='depth',         type=qb.check_positive,               help='the number of levels to search')
    parser.add_argument('--num_results',      metavar='n',    dest='num_results',   type=qb.check_non_negative,           help='first n results')
    parser.add_argument('--smallest',                         dest='smallest',      action='store_true',                  help='top n smallest files')
    parser.add_argument('--largest',                          dest='largest',       action='store_true',                  help='top n largest files')
    parser.add_argument('--oldest',                           dest='oldest',        action='store_true',                  help='top n oldest files')
    parser.add_argument('--newest',                           dest='newest',        action='store_true',                  help='top n newest files')
    parser.add_argument('--name',             metavar='name', dest='name',          type=str,                             help='filename pattern')
    parser.add_argument('--atime_before',     metavar='t',    dest='atime_before',  type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--mtime_before',     metavar='t',    dest='mtime_before',  type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--ctime_before',     metavar='t',    dest='ctime_before',  type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--atime_after',      metavar='t',    dest='atime_after',   type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--mtime_after',      metavar='t',    dest='mtime_after',   type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--ctime_after',      metavar='t',    dest='ctime_after',   type=qb.check_non_negative,           help='seconds since epoch')
    parser.add_argument('--smaller_than',     metavar='b',    dest='smaller_than',  type=qb.check_non_negative,           help='bytes')
    parser.add_argument('--larger_than',      metavar='b',    dest='larger_than',   type=qb.check_non_negative,           help='bytes')
    parser.add_argument('--uid', '--user',    metavar='u',    dest='uid',           type=str,                             help='uid or username')
    parser.add_argument('--select',           metavar='cols', dest='select',        type=str,                default='*', help='comma separated columns (default: *)')
    parser.add_argument('--group_by',         metavar='cols', dest='group_by',      type=str,                             help='comma separated columns (default: None)')
    parser.add_argument('GUFI_tree',                                                                         nargs='+',   help='path containing GUFI tree database file')

    args = parser.parse_args();

    # create the find command
    find = qb.find(args.root, args.GUFI_tree)
    find_out, find_err = find.communicate()
    if find.returncode != 0:
        print 'Error: find returned: {}\n{}'.format(os.strerror(find.returncode), find_err)
        sys.exit(find.returncode)

    # create the bfq command
    bfq_cmd = ['{}/bfq'.format(os.path.dirname(os.path.realpath(__file__))),
               '-p', '-P',
               '-E', qb.build_query(build_select(args),
                                    ['entries'],
                                    build_where(args),
                                    build_group_by(args),
                                    build_order_by(args),
                                    args.num_results)] + find_out.split()

    if args.delim:
        bfq_cmd += ['-d', args.delim]

    if args.depth:
        bfq_cmd += ['-l', str(args.depth)]

    bfq = subprocess.Popen(bfq_cmd)
    bfq.communicate() # block until bfq finishes

    sys.exit(bfq.returncode)
