#!/usr/bin/env bash
# gufi_find
#
# This script somewhat replicates
# GNU find and ls using GUFI's bfq
#

function usage() {
    echo "Usage ${BASH_SOURCE} [options] [SELECT [columns]] [WHERE [conditions]] GUFI_tree ..."
    echo
    echo "  options"
    echo "    -h | --help          print help message"
    echo "    --root               top-most directory to search from (default: /)"
    echo "    --num_results n      first n results"
    echo "    --largest            top n largest files"
    echo "    --newest             top n newest files"
    # echo "    --mostfiles          top n users"
    echo
    echo "  SELECT columns"
    echo "    --type"
    echo "    --[amc]time"
    echo "    --size"
    echo "    --uid | --user"
    echo
    echo "  WHERE conditions"
    echo "    --name n             filename pattern"
    # echo "    --type t             f or d"
    echo "    --[amc]time_before t seconds since epoch"
    echo "    --[amc]time_after t  seconds since epoch"
    echo "    --smaller_than b     bytes"
    echo "    --larger_than b      bytes"
    echo "    --uid | --user u     uid or user name"
    echo
    echo "  GUFI_tree              directory containing GUFI index-tree database"
}

# default treating options as SELECT options
mode="SELECT"

# default top-most directory is root
root="/"

# array of SELECT columns to print
# name is guaranteed to be one of the columns
SELECT=("name")

# limit the number of results per database
# empty results in no limit
LIMIT=""

# array of WHERE conditions to combine
WHERE=()

# array of ORDER BY columns
ORDER=()

# Parse command line arguments
# https://stackoverflow.com/a/14203146
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
        usage
        exit 0
        ;;
    --root)
        root="$2"
        shift
        shift
        continue
        ;;
    --num_results)
        LIMIT="$2"
        shift
        shift
        continue
        ;;
    --largest)
        ORDER+=("size DESC")
        shift
        continue
        ;;
    --newest)
        ORDER+=("ctime DESC")
        shift
        continue
        ;;
    # --mostfiles)
    #     shift
    #     continue
    #     ;;
    SELECT|WHERE)
        mode="$1"
        shift
        continue
        ;;
esac

case $mode in
    # SELECT options
    SELECT)
        case $key in
            --[amc]time|--type|--size|--uid)
                SELECT+=("${key#--}")
                shift
                ;;
            --user)
                SELECT+=("uid")
                shift
                ;;
            # all other options are considered GUFI tree directories
            *)
                POSITIONAL+=("$1") # save it in an array for later
                shift
                ;;
        esac
        continue
        ;;

    # WHERE options
    WHERE)
        case $key in
            --name)
                WHERE+=("name REGEXP '$2'")
                shift
                shift
                ;;
            # # bfq needs some changing to make type work properly
            # --type)
            #    WHERE+=("type REGEXP '$2'")
            #    shift
            #    shift
            #    ;;
            --[amc]time_before)
                time_type="${key#--}"
                time_type="${time_type%_before}"
                WHERE+=("${time_type} < $2")
                shift
                shift
                ;;
            --[amc]time_after)
                time_type="${key#--}"
                time_type="${time_type%_after}"
                WHERE+=("${time_type} > $2")
                shift
                shift
                ;;
            --smaller_than)
                WHERE+=("size < $2")
                shift
                shift
                ;;
            --larger_than)
                WHERE+=("size > $2")
                shift
                shift
                ;;
            --uid|--user)
                uid=$(id -u $2)
                rc=$?
                if [[ "$rc" -ne "0" ]]
                then
                    exit $rc
                fi
                WHERE+=("uid == $uid")
                shift
                shift
                ;;
            # all other options are considered GUFI tree directories
            *)
                POSITIONAL+=("$1") # save it in an array for later
                shift
                ;;
        esac
        continue
        ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# make sure at least one GUFI tree is provided
if [[ "${#POSITIONAL[@]}" -lt "1" ]];
then
    usage
    exit 1
fi

# combine SELECT columns
columns="${SELECT[0]}"
for column in "${SELECT[@]:1}"
do
    columns="${columns}, ${column}"
done

# only combine WHERE conditions if there are any
conditions=""
if [[ "${#WHERE[@]}" -gt "0" ]]
then
    # combine conditions
    conditions="WHERE (${WHERE[0]})"
    for condition in "${WHERE[@]:1}"
    do
        conditions="${conditions} AND (${condition})"
    done
fi

# combine output ordering
ordering=""
if [[ "${#ORDER[@]}" -gt "0" ]]
then
    # combine orderings
    ordering="ORDER BY ${ORDER[0]}"
    for order in "${ORDER[@]:1}"
    do
        ordering="${ordering}, ${order}"
    done
fi

# limit the number of results
limit=""
if [[ ! -z "${LIMIT}" ]]
then
    limit="LIMIT ${LIMIT}"
fi

query="SELECT ${columns} FROM entries ${conditions} ${ordering} ${limit};"

echo "${query}"

# run queries
for pattern in "${POSITIONAL[@]}"
do
    # search for patterh starting from root
    for path in $(find "${root}" "${pattern}" -path "${pattern}" -type d 2>/dev/null)
    do
        $(dirname ${BASH_SOURCE})/bfq -p -P -d " " -E "${query}" "${path}" &
        # $(dirname ${BASH_SOURCE})/querydb -V "${path}" "${query}" &
    done
done

wait
